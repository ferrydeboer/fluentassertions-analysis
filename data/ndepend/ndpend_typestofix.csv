44 types,File,Breaking Point,Debt,Annual Interest,Issues,# lines of code (LOC),DebtRating,DebtRatio
FluentAssertions.Equivalency.Steps .GenericEnumerableEquivalencyStep,Src\FluentAssertions\Equivalency\Steps\GenericEnumerableEquivalencyStep.cs,147d,57min,2h  22min,"3 issues;FluentAssertions.Equivalency.Steps .GenericEnumerableEquivalencyStep violates rule 'Types almost 100% tested should be 100% tested';FluentAssertions.Equivalency.Steps .GenericEnumerableEquivalencyStep .Handle(Comparands ,IEquivalencyValidationContext ,IEquivalencyValidator) violates rule 'Code should be tested';FluentAssertions.Equivalency.Steps .GenericEnumerableEquivalencyStep. .cctor() violates rule 'Avoid types initialization cycles'",33,C,14.74
FluentAssertions.Formatting .FormattedObjectGraph,Src\FluentAssertions\Formatting\FormattedObjectGraph.cs,152d,42min,1h  40min,4 issues;FluentAssertions.Formatting .FormattedObjectGraph violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Formatting .FormattedObjectGraph violates rule 'Types 100% covered should be tagged with FullCoveredAttribute';FluentAssertions.Formatting .FormattedObjectGraph .WithIndentation() violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Formatting .FormattedObjectGraph .lineBuilderWhitespace violates rule 'Don't assign a field from many methods',36,B,8.1
FluentAssertions.Common .StringExtensions,Src\FluentAssertions\Common\StringExtensions.cs,182d,54min,1h  49min,"16 issues;FluentAssertions.Common .StringExtensions violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Common .StringExtensions violates rule 'Types almost 100% tested should be 100% tested';FluentAssertions.Common .StringExtensions .IndexOfFirstMismatch(String ,String,StringComparison) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common .StringExtensions.IndexedSegmentAt (String,Int32) violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Common .StringExtensions.IndexedSegmentAt (String,Int32) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common .StringExtensions .WithoutSpecificCollectionIndices (String) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common .StringExtensions .ContainsSpecificCollectionIndex (String) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common .StringExtensions .EscapePlaceholders(String) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common .StringExtensions .UnescapePlaceholders(String) violates rule 'Code should be tested';FluentAssertions.Common .StringExtensions .UnescapePlaceholders(String) violates rule 'Potentially Dead Methods';FluentAssertions.Common .StringExtensions.Combine(String ,String,String) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common .StringExtensions.Capitalize (String) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common .StringExtensions.IndentLines (String) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common .StringExtensions.RemoveNewLines (String) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common .StringExtensions.CountSubstring (String,String,StringComparison) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common .StringExtensions .IsLongOrMultiline(String) violates rule 'Avoid public methods not publicly visible'",41,C,11.53
FluentAssertions.Formatting .Formatter,Src\FluentAssertions\Formatting\Formatter.cs,188d,50min,1h  37min,"5 issues;FluentAssertions.Formatting .Formatter violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Formatting .Formatter.ToString(Object ,FormattingOptions) violates rule 'Code should be tested';FluentAssertions.Formatting .Formatter..cctor() violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Formatting .Formatter.isReentry violates rule 'Avoid non-readonly static fields';FluentAssertions.Formatting .Formatter.isReentry violates rule 'Static fields naming convention'",30,C,13.84
FluentAssertions.Collections .MaximumMatching .MaximumMatchingSolver<TValue >+Match,Src\FluentAssertions\Collections\MaximumMatching\MaximumMatchingSolver.cs,191d,44min,1h  24min,6 issues;FluentAssertions.Collections .MaximumMatching .MaximumMatchingSolver<TValue >+Match violates rule 'Override equals and operator equals on value types';FluentAssertions.Collections .MaximumMatching .MaximumMatchingSolver<TValue >+Match violates rule 'Structures should be immutable';FluentAssertions.Collections .MaximumMatching .MaximumMatchingSolver<TValue >+Match.Predicate violates rule 'Fields that could have a lower visibility';FluentAssertions.Collections .MaximumMatching .MaximumMatchingSolver<TValue >+Match.Predicate violates rule 'A field must not be assigned from outside its parent hierarchy types';FluentAssertions.Collections .MaximumMatching .MaximumMatchingSolver<TValue >+Match.Element violates rule 'Fields that could have a lower visibility';FluentAssertions.Collections .MaximumMatching .MaximumMatchingSolver<TValue >+Match.Element violates rule 'A field must not be assigned from outside its parent hierarchy types',0,E,169.75
FluentAssertions.AssertionOptions,Src\FluentAssertions\AssertionOptions.cs,192d,1h  16min,2h  24min,5 issues;FluentAssertions.AssertionOptions violates rule 'Types 100% covered should be tagged with FullCoveredAttribute';FluentAssertions.AssertionOptions. .cctor() violates rule 'Avoid types initialization cycles';FluentAssertions.AssertionOptions .defaults violates rule 'Avoid non-readonly static fields';FluentAssertions.AssertionOptions .defaults violates rule 'Avoid static fields with a mutable field type';FluentAssertions.AssertionOptions .defaults violates rule 'Static fields naming convention',9,D,43.98
FluentAssertions.Equivalency .EquivalencyValidator,Src\FluentAssertions\Equivalency\EquivalencyValidator.cs,244d,1h  11min,1h  47min,"6 issues;FluentAssertions.Equivalency .EquivalencyValidator violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Equivalency .EquivalencyValidator violates rule 'Types almost 100% tested should be 100% tested';FluentAssertions.Equivalency .EquivalencyValidator violates rule 'Avoid prefixing type name with parent namespace name';FluentAssertions.Equivalency .EquivalencyValidator .TryToProveNodesAreEquivalent (Comparands ,IEquivalencyValidationContext) violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Equivalency .EquivalencyValidator .TryToProveNodesAreEquivalent (Comparands ,IEquivalencyValidationContext) violates rule 'Code should be tested';FluentAssertions.Equivalency .EquivalencyValidator .TryToProveNodesAreEquivalent (Comparands ,IEquivalencyValidationContext) violates rule 'Methods prefixed with 'Try' should return a boolean'",34,C,19.83
FluentAssertions.Equivalency.Steps .GenericDictionaryEquivalencyStep,Src\FluentAssertions\Equivalency\Steps\GenericDictionaryEquivalencyStep.cs,249d,1h  28min,2h  8min,"4 issues;FluentAssertions.Equivalency.Steps .GenericDictionaryEquivalencyStep violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Equivalency.Steps .GenericDictionaryEquivalencyStep violates rule 'Types 100% covered should be tagged with FullCoveredAttribute';FluentAssertions.Equivalency.Steps .GenericDictionaryEquivalencyStep .AssertDictionaryEquivalence <TSubjectKey,TSubjectValue ,TExpectedKey,TExpectedValue> (EquivalencyValidationContext ,IEquivalencyValidator ,IEquivalencyOptions,IDictionary <TSubjectKey,TSubjectValue> ,IDictionary<TExpectedKey ,TExpectedValue>) violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Equivalency.Steps .GenericDictionaryEquivalencyStep. .cctor() violates rule 'Avoid types initialization cycles'",58,C,14.55
FluentAssertions.Common.Services,Src\FluentAssertions\Common\Services.cs,273d,1h  38min,2h  10min,8 issues;FluentAssertions.Common.Services violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Common.Services .EnsureInitialized() violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Common.Services .ExecuteCustomInitializers() violates rule 'Code should be tested';FluentAssertions.Common.Services .configuration violates rule 'Avoid non-readonly static fields';FluentAssertions.Common.Services .configuration violates rule 'Avoid static fields with a mutable field type';FluentAssertions.Common.Services .configuration violates rule 'Static fields naming convention';FluentAssertions.Common.Services .isInitialized violates rule 'Avoid non-readonly static fields';FluentAssertions.Common.Services .isInitialized violates rule 'Static fields naming convention',37,C,18.91
FluentAssertions.Equivalency .SelfReferenceEquivalencyOptions <TSelf>+Restriction<TMember>,Src\FluentAssertions\Equivalency\SelfReferenceEquivalencyOptions.cs,313d,35min,40min,"4 issues;FluentAssertions.Equivalency .SelfReferenceEquivalencyOptions <TSelf>+Restriction<TMember> violates rule 'Nested types should not be visible';FluentAssertions.Equivalency .SelfReferenceEquivalencyOptions <TSelf>+Restriction<TMember> violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Equivalency .SelfReferenceEquivalencyOptions <TSelf>+Restriction<TMember> violates rule 'Types 100% covered should be tagged with FullCoveredAttribute';FluentAssertions.Equivalency .SelfReferenceEquivalencyOptions <TSelf>+Restriction<TMember>.When (Expression<Func<IObjectInfo ,Boolean>>) violates rule 'Avoid namespaces mutually dependent'",7,D,31.16
FluentAssertions.Equivalency .Tracing.GetTraceMessage,Src\FluentAssertions\Equivalency\Tracing\GetTraceMessage.cs,332d,50min,54min,2 issues;FluentAssertions.Equivalency .Tracing.GetTraceMessage violates rule 'Avoid custom delegates';FluentAssertions.Equivalency .Tracing.GetTraceMessage violates rule 'Avoid namespaces mutually dependent',N/A,E,115.74
FluentAssertions.Xml.Equivalency .XmlReaderValidator,Src\FluentAssertions\Xml\Equivalency\XmlReaderValidator.cs,1y  95d,42min,33min,"6 issues;FluentAssertions.Xml.Equivalency .XmlReaderValidator violates rule 'Class with no descendant should be sealed if possible';FluentAssertions.Xml.Equivalency .XmlReaderValidator violates rule 'Types almost 100% tested should be 100% tested';FluentAssertions.Xml.Equivalency .XmlReaderValidator..ctor (XmlReader,XmlReader,String ,Object[]) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Xml.Equivalency .XmlReaderValidator.Validate (Boolean) violates rule 'Code should be tested';FluentAssertions.Xml.Equivalency .XmlReaderValidator.Validate (Boolean) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Xml.Equivalency .XmlReaderValidator.Validate() violates rule 'Avoid methods too big, too complex'",81,B,5.22
FluentAssertions.Equivalency .EquivalencyValidationContext,Src\FluentAssertions\Equivalency\EquivalencyValidationContext.cs,1y  102d,1h  9min,54min,"6 issues;FluentAssertions.Equivalency .EquivalencyValidationContext violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Equivalency .EquivalencyValidationContext violates rule 'Types almost 100% tested should be 100% tested';FluentAssertions.Equivalency .EquivalencyValidationContext violates rule 'Avoid prefixing type name with parent namespace name';FluentAssertions.Equivalency .EquivalencyValidationContext. .ctor(INode,IEquivalencyOptions) violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Equivalency .EquivalencyValidationContext .IsCyclicReference(Object) violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Equivalency .EquivalencyValidationContext .ToString() violates rule 'Code should be tested'",21,C,16.04
FluentAssertions.Formatting .FormattedObjectGraph+PossibleMult ilineFragment,Src\FluentAssertions\Formatting\FormattedObjectGraph.cs,1y  168d,33min,22min,7 issues;FluentAssertions.Formatting .FormattedObjectGraph+PossibleMult ilineFragment violates rule 'Class with no descendant should be sealed if possible';FluentAssertions.Formatting .FormattedObjectGraph+PossibleMult ilineFragment violates rule 'Nested types should not be visible';FluentAssertions.Formatting .FormattedObjectGraph+PossibleMult ilineFragment..ctor (FormattedObjectGraph) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Formatting .FormattedObjectGraph+PossibleMult ilineFragment.InsertLineOrFragment (String) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Formatting .FormattedObjectGraph+PossibleMult ilineFragment .AddEndingLineOrFragment(String) violates rule 'Code should be tested';FluentAssertions.Formatting .FormattedObjectGraph+PossibleMult ilineFragment .AddEndingLineOrFragment(String) violates rule 'Potentially Dead Methods';FluentAssertions.Formatting .FormattedObjectGraph+PossibleMult ilineFragment..ctor (FormattedObjectGraph+PossibleMult ilineFragment) violates rule 'Code should be tested',29,B,7.04
FluentAssertions.Execution .GivenSelectorExtensions,Src\FluentAssertions\Execution\GivenSelectorExtensions.cs,1y  176d,38min,25min,"13 issues;FluentAssertions.Execution .GivenSelectorExtensions violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Execution .GivenSelectorExtensions violates rule 'Types 100% covered should be tagged with FullCoveredAttribute';FluentAssertions.Execution .GivenSelectorExtensions .AssertCollectionIsNotNull<T> (GivenSelector<IEnumerable<T>>) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Execution .GivenSelectorExtensions .AssertEitherCollectionIsNotEmpty <T>(GivenSelector<ICollection<T>> ,Int32) violates rule 'Methods that could have a lower visibility';FluentAssertions.Execution .GivenSelectorExtensions .AssertEitherCollectionIsNotEmpty <T>(GivenSelector<ICollection<T>> ,Int32) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Execution .GivenSelectorExtensions .AssertCollectionHasEnoughItems<T> (GivenSelector<IEnumerable<T>> ,Int32) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Execution .GivenSelectorExtensions .AssertCollectionHasEnoughItems<T> (GivenSelector<ICollection<T>> ,Int32) violates rule 'Methods that could have a lower visibility';FluentAssertions.Execution .GivenSelectorExtensions .AssertCollectionHasEnoughItems<T> (GivenSelector<ICollection<T>> ,Int32) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Execution .GivenSelectorExtensions .AssertCollectionHasNotTooManyItem s<T>(GivenSelector<ICollection<T>> ,Int32) violates rule 'Methods that could have a lower visibility';FluentAssertions.Execution .GivenSelectorExtensions .AssertCollectionHasNotTooManyItem s<T>(GivenSelector<ICollection<T>> ,Int32) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Execution .GivenSelectorExtensions .AssertCollectionsHaveSameCount<T> (GivenSelector<ICollection<T>> ,Int32) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Execution .GivenSelectorExtensions .AssertCollectionsHaveSameItems <TActual,TExpected>(GivenSelector <ICollection<TActual>>,ICollection <TExpected>,Func<ICollection <TActual>,ICollection<TExpected> ,Int32>) violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Execution .GivenSelectorExtensions .AssertCollectionsHaveSameItems <TActual,TExpected>(GivenSelector <ICollection<TActual>>,ICollection <TExpected>,Func<ICollection <TActual>,ICollection<TExpected> ,Int32>) violates rule 'Avoid public methods not publicly visible'",22,C,14.66
FluentAssertions.Equivalency .EquivalencyOptions<TExpectation>,Src\FluentAssertions\Equivalency\EquivalencyOptions.cs,1y  232d,2h  42min,1h  39min,"13 issues;FluentAssertions.Equivalency .EquivalencyOptions<TExpectation> violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Equivalency .EquivalencyOptions<TExpectation> violates rule 'Types almost 100% tested should be 100% tested';FluentAssertions.Equivalency .EquivalencyOptions<TExpectation> violates rule 'Avoid prefixing type name with parent namespace name';FluentAssertions.Equivalency .EquivalencyOptions<TExpectation> violates rule 'Avoid defining multiple types in a source file';FluentAssertions.Equivalency .EquivalencyOptions<TExpectation>. .ctor() violates rule 'Code should be tested';FluentAssertions.Equivalency .EquivalencyOptions<TExpectation> .Excluding(Expression<Func <TExpectation,Object>>) violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Equivalency .EquivalencyOptions<TExpectation> .For<TNext>(Expression<Func <TExpectation,IEnumerable<TNext>>> ) violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Equivalency .EquivalencyOptions<TExpectation> .Including(Expression<Func <TExpectation,Object>>) violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Equivalency .EquivalencyOptions<TExpectation> .WithStrictOrderingFor(Expression <Func<TExpectation,Object>>) violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Equivalency .EquivalencyOptions<TExpectation> .WithoutStrictOrderingFor (Expression<Func<TExpectation ,Object>>) violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Equivalency .EquivalencyOptions<TExpectation> .AsCollection() violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Equivalency .EquivalencyOptions<TExpectation> .WithMapping(String,String) violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Equivalency .EquivalencyOptions<TExpectation> .WithMapping<TNestedExpectation ,TNestedSubject>(String,String) violates rule 'Avoid namespaces mutually dependent'",22,E,53.67
FluentAssertions.Equivalency .ConversionSelector,Src\FluentAssertions\Equivalency\ConversionSelector.cs,1y  234d,33min,20min,"3 issues;FluentAssertions.Equivalency .ConversionSelector violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Equivalency .ConversionSelector violates rule 'Types 100% covered should be tagged with FullCoveredAttribute';FluentAssertions.Equivalency .ConversionSelector .RequiresConversion(Comparands ,INode) violates rule 'Avoid namespaces mutually dependent'",31,B,9.09
FluentAssertions.Formatting .FormatChild,Src\FluentAssertions\Formatting\FormatChild.cs,1y  273d,35min,20min,1 issue;FluentAssertions.Formatting .FormatChild violates rule 'Avoid custom delegates',N/A,E,81.02
FluentAssertions.Equivalency .GetSubjectId,Src\FluentAssertions\Equivalency\GetSubjectId.cs,2y  18d,41min,20min,1 issue;FluentAssertions.Equivalency .GetSubjectId violates rule 'Avoid custom delegates',N/A,E,94.91
FluentAssertions.Types .TypeSelector,Src\FluentAssertions\Types\TypeSelector.cs,2y  68d,1h  56min,53min,5 issues;FluentAssertions.Types .TypeSelector violates rule 'Avoid types with too many methods';FluentAssertions.Types .TypeSelector violates rule 'Types almost 100% tested should be 100% tested';FluentAssertions.Types .TypeSelector .UnwrapEnumerableTypes() violates rule 'Code should be tested';FluentAssertions.Types .TypeSelector.System.Collections .IEnumerable.GetEnumerator() violates rule 'Code should be tested';FluentAssertions.Types .TypeSelector.types violates rule 'Don't assign a field from many methods',104,B,9.75
FluentAssertions.Common .TypeMemberReflector,Src\FluentAssertions\Common\TypeMemberReflector.cs,2y  71d,1h  50min,50min,"13 issues;FluentAssertions.Common .TypeMemberReflector violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Common .TypeMemberReflector violates rule 'Types almost 100% tested should be 100% tested';FluentAssertions.Common .TypeMemberReflector violates rule 'Types that could be declared as private, nested in a parent type';FluentAssertions.Common .TypeMemberReflector.get_Members() violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common .TypeMemberReflector .get_Properties() violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common .TypeMemberReflector.get_Fields() violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common .TypeMemberReflector..ctor(Type ,MemberVisibility) violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Common .TypeMemberReflector..ctor(Type ,MemberVisibility) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common .TypeMemberReflector .LoadProperties(Type ,MemberVisibility) violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Common .TypeMemberReflector .GetPropertiesFromHierarchy(Type ,MemberVisibility) violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Common .TypeMemberReflector.LoadFields (Type,MemberVisibility) violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Common .TypeMemberReflector .GetFieldsFromHierarchy(Type ,MemberVisibility) violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Common .TypeMemberReflector .GetInterfaceMembers<TMemberInfo> (Type,Func<Type,IEnumerable <TMemberInfo>>) violates rule 'Code should be tested'",62,C,14.69
FluentAssertions.Execution .AssertionScope,Src\FluentAssertions\Execution\AssertionScope.cs,2y  143d,3h  22min,1h  24min,"10 issues;FluentAssertions.Execution .AssertionScope violates rule 'Avoid types with too many methods';FluentAssertions.Execution .AssertionScope violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Execution .AssertionScope violates rule 'Types almost 100% tested should be 100% tested';FluentAssertions.Execution .AssertionScope.set_Current (AssertionScope) violates rule 'Code should be tested';FluentAssertions.Execution .AssertionScope.set_Current (AssertionScope) violates rule 'Potentially Dead Methods';FluentAssertions.Execution .AssertionScope.get_Succeeded() violates rule 'Methods that could have a lower visibility';FluentAssertions.Execution .AssertionScope..ctor (IAssertionStrategy,AssertionScope ) violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Execution .AssertionScope.ForConstraint (OccurrenceConstraint,Int32) violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Execution .AssertionScope.AssumeSingleCaller () violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Execution .AssertionScope.FluentAssertions .Execution.IAssertionScope .WithDefaultIdentifier(String) violates rule 'Code should be tested'",123,C,12.3
"FluentAssertions.Equivalency .NestedExclusionOptionBuilder <TExpectation,TCurrent>",Src\FluentAssertions\Equivalency\NestedExclusionOptionBuilder.cs,2y  177d,48min,19min,"4 issues;FluentAssertions.Equivalency .NestedExclusionOptionBuilder <TExpectation,TCurrent> violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Equivalency .NestedExclusionOptionBuilder <TExpectation,TCurrent> violates rule 'Types 100% covered should be tagged with FullCoveredAttribute';FluentAssertions.Equivalency .NestedExclusionOptionBuilder <TExpectation,TCurrent>.Exclude (Expression<Func<TCurrent,Object>> ) violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Equivalency .NestedExclusionOptionBuilder <TExpectation,TCurrent>.For<TNext> (Expression<Func<TCurrent ,IEnumerable<TNext>>>) violates rule 'Avoid namespaces mutually dependent'",9,D,37.04
FluentAssertions.Equivalency .SelfReferenceEquivalencyOptions <TSelf>,Src\FluentAssertions\Equivalency\SelfReferenceEquivalencyOptions.cs,2y  244d,6h  27min,2h  25min,"16 issues;FluentAssertions.Equivalency .SelfReferenceEquivalencyOptions <TSelf> violates rule 'Avoid types with too many methods';FluentAssertions.Equivalency .SelfReferenceEquivalencyOptions <TSelf> violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Equivalency .SelfReferenceEquivalencyOptions <TSelf> violates rule 'Types 100% covered should be tagged with FullCoveredAttribute';FluentAssertions.Equivalency .SelfReferenceEquivalencyOptions <TSelf> violates rule 'Abstract base class should be suffixed with 'Base'';FluentAssertions.Equivalency .SelfReferenceEquivalencyOptions <TSelf>.FluentAssertions .Equivalency.IEquivalencyOptions .get_SelectionRules() violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Equivalency .SelfReferenceEquivalencyOptions <TSelf>..ctor() violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Equivalency .SelfReferenceEquivalencyOptions <TSelf>.Excluding(Expression<Func <IMemberInfo,Boolean>>) violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Equivalency .SelfReferenceEquivalencyOptions <TSelf>.Including(Expression<Func <IMemberInfo,Boolean>>) violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Equivalency .SelfReferenceEquivalencyOptions <TSelf>.ExcludingMissingMembers() violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Equivalency .SelfReferenceEquivalencyOptions <TSelf>.ThrowingOnMissingMembers() violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Equivalency .SelfReferenceEquivalencyOptions <TSelf>.Using<T>(IEqualityComparer <T>) violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Equivalency .SelfReferenceEquivalencyOptions <TSelf>.WithStrictOrdering() violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Equivalency .SelfReferenceEquivalencyOptions <TSelf>.WithStrictOrderingFor (Expression<Func<IObjectInfo ,Boolean>>) violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Equivalency .SelfReferenceEquivalencyOptions <TSelf>.WithoutStrictOrdering() violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Equivalency .SelfReferenceEquivalencyOptions <TSelf>.WithoutStrictOrderingFor (Expression<Func<IObjectInfo ,Boolean>>) violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Equivalency .SelfReferenceEquivalencyOptions <TSelf>.ToString() violates rule 'Avoid methods potentially poorly commented'",198,C,14.75
FluentAssertions.CallerIdentifier,Src\FluentAssertions\CallerIdentifier.cs,3y  64d,31min,9min,4 issues;FluentAssertions.CallerIdentifier .set_Logger(Action<String>) violates rule 'Code should be tested';FluentAssertions.CallerIdentifier .OnlyOneFluentAssertionScopeOnCall Stack() violates rule 'Code should be tested';FluentAssertions.CallerIdentifier .IsCustomAssertion(StackFrame) violates rule 'Code should be tested';FluentAssertions.CallerIdentifier .GetSourceCodeStatementFrom (StackFrame) violates rule 'Code should be tested',76,A,3.68
FluentAssertions.Common .CSharpAccessModifierExtensions,Src\FluentAssertions\Common\CSharpAccessModifierExtensions.cs,3y  64d,38min,11min,3 issues;FluentAssertions.Common .CSharpAccessModifierExtensions .GetCSharpAccessModifier (MethodBase) violates rule 'Code should be tested';FluentAssertions.Common .CSharpAccessModifierExtensions .GetCSharpAccessModifier(FieldInfo ) violates rule 'Code should be tested';FluentAssertions.Common .CSharpAccessModifierExtensions .GetCSharpAccessModifier(Type) violates rule 'Code should be tested',37,C,10.74
FluentAssertions.Equivalency.Steps .SimpleEqualityEquivalencyStep,Src\FluentAssertions\Equivalency\Steps\SimpleEqualityEquivalencyStep.cs,3y  193d,38min,10min,"3 issues;FluentAssertions.Equivalency.Steps .SimpleEqualityEquivalencyStep violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Equivalency.Steps .SimpleEqualityEquivalencyStep .Handle(Comparands ,IEquivalencyValidationContext ,IEquivalencyValidator) violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Equivalency.Steps .SimpleEqualityEquivalencyStep .Handle(Comparands ,IEquivalencyValidationContext ,IEquivalencyValidator) violates rule 'Code should be tested'",4,E,63.62
FluentAssertions .ExceptionAssertionsExtensions,Src\FluentAssertions\ExceptionAssertionsExtensions.cs,4y  31d,2h  8min,31min,"9 issues;FluentAssertions .ExceptionAssertionsExtensions violates rule 'Avoid namespaces mutually dependent';FluentAssertions .ExceptionAssertionsExtensions violates rule 'Types 100% covered should be tagged with FullCoveredAttribute';FluentAssertions .ExceptionAssertionsExtensions .WithMessage<TException>(Task <ExceptionAssertions<TException>> ,String,String,Object[]) violates rule 'Avoid namespaces mutually dependent';FluentAssertions .ExceptionAssertionsExtensions .Where<TException>(Task <ExceptionAssertions<TException>> ,Expression<Func<TException ,Boolean>>,String,Object[]) violates rule 'Avoid namespaces mutually dependent';FluentAssertions .ExceptionAssertionsExtensions .WithInnerException<TException ,TInnerException>(Task <ExceptionAssertions<TException>> ,String,Object[]) violates rule 'Avoid namespaces mutually dependent';FluentAssertions .ExceptionAssertionsExtensions .WithInnerException<TException> (Task<ExceptionAssertions <TException>>,Type,String,Object[] ) violates rule 'Avoid namespaces mutually dependent';FluentAssertions .ExceptionAssertionsExtensions .WithInnerExceptionExactly <TException,TInnerException>(Task <ExceptionAssertions<TException>> ,String,Object[]) violates rule 'Avoid namespaces mutually dependent';FluentAssertions .ExceptionAssertionsExtensions .WithInnerExceptionExactly <TException>(Task <ExceptionAssertions<TException>> ,Type,String,Object[]) violates rule 'Avoid namespaces mutually dependent';FluentAssertions .ExceptionAssertionsExtensions .WithParameterName<TException> (ExceptionAssertions<TException> ,String,String,Object[]) violates rule 'Avoid namespaces mutually dependent'",9,E,82.3
FluentAssertions.Equivalency.Steps .EnumerableEquivalencyValidator,Src\FluentAssertions\Equivalency\Steps\EnumerableEquivalencyValidator.cs,4y  64d,1h  54min,27min,"15 issues;FluentAssertions.Equivalency.Steps .EnumerableEquivalencyValidator violates rule 'Class with no descendant should be sealed if possible';FluentAssertions.Equivalency.Steps .EnumerableEquivalencyValidator violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Equivalency.Steps .EnumerableEquivalencyValidator .get_Recursive() violates rule 'Methods that could have a lower visibility';FluentAssertions.Equivalency.Steps .EnumerableEquivalencyValidator .get_Recursive() violates rule 'Avoid public methods not publicly visible';FluentAssertions.Equivalency.Steps .EnumerableEquivalencyValidator .set_Recursive(Boolean) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Equivalency.Steps .EnumerableEquivalencyValidator .get_OrderingRules() violates rule 'Methods that could have a lower visibility';FluentAssertions.Equivalency.Steps .EnumerableEquivalencyValidator .get_OrderingRules() violates rule 'Avoid public methods not publicly visible';FluentAssertions.Equivalency.Steps .EnumerableEquivalencyValidator .set_OrderingRules (OrderingRuleCollection) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Equivalency.Steps .EnumerableEquivalencyValidator. .ctor(IEquivalencyValidator ,IEquivalencyValidationContext) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Equivalency.Steps .EnumerableEquivalencyValidator .Execute<T>(Object[],T[]) violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Equivalency.Steps .EnumerableEquivalencyValidator .Execute<T>(Object[],T[]) violates rule 'Code should be tested';FluentAssertions.Equivalency.Steps .EnumerableEquivalencyValidator .Execute<T>(Object[],T[]) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Equivalency.Steps .EnumerableEquivalencyValidator .AssertElementGraphEquivalencyWith StrictOrdering<T>(Object[],T[]) violates rule 'Code should be tested';FluentAssertions.Equivalency.Steps .EnumerableEquivalencyValidator .AssertElementGraphEquivalencyWith LooseOrdering<T>(Object[],T[]) violates rule 'Code should be tested';FluentAssertions.Equivalency.Steps .EnumerableEquivalencyValidator .LooselyMatchAgainst<T>(IList <Object>,T,Int32) violates rule 'Code should be tested'",90,C,11.73
FluentAssertions.Equivalency.Steps .StringEqualityEquivalencyStep,Src\FluentAssertions\Equivalency\Steps\StringEqualityEquivalencyStep.cs,4y  98d,38min,8min,"3 issues;FluentAssertions.Equivalency.Steps .StringEqualityEquivalencyStep violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Equivalency.Steps .StringEqualityEquivalencyStep violates rule 'Types 100% covered should be tagged with FullCoveredAttribute';FluentAssertions.Equivalency.Steps .StringEqualityEquivalencyStep .Handle(Comparands ,IEquivalencyValidationContext ,IEquivalencyValidator) violates rule 'Avoid namespaces mutually dependent'",21,C,16.92
FluentAssertions.Equivalency.Steps .ValueTypeEquivalencyStep,Src\FluentAssertions\Equivalency\Steps\ValueTypeEquivalencyStep.cs,4y  98d,38min,8min,"3 issues;FluentAssertions.Equivalency.Steps .ValueTypeEquivalencyStep violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Equivalency.Steps .ValueTypeEquivalencyStep violates rule 'Types 100% covered should be tagged with FullCoveredAttribute';FluentAssertions.Equivalency.Steps .ValueTypeEquivalencyStep.Handle (Comparands ,IEquivalencyValidationContext ,IEquivalencyValidator) violates rule 'Avoid namespaces mutually dependent'",10,D,33.83
FluentAssertions.Equivalency.Steps .XAttributeEquivalencyStep,Src\FluentAssertions\Equivalency\Steps\XAttributeEquivalencyStep.cs,4y  98d,38min,8min,"3 issues;FluentAssertions.Equivalency.Steps .XAttributeEquivalencyStep violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Equivalency.Steps .XAttributeEquivalencyStep violates rule 'Types 100% covered should be tagged with FullCoveredAttribute';FluentAssertions.Equivalency.Steps .XAttributeEquivalencyStep .OnHandle(Comparands ,IEquivalencyValidationContext ,IEquivalencyValidator) violates rule 'Avoid namespaces mutually dependent'",4,E,62.83
FluentAssertions.Equivalency.Steps .XDocumentEquivalencyStep,Src\FluentAssertions\Equivalency\Steps\XDocumentEquivalencyStep.cs,4y  98d,38min,8min,"3 issues;FluentAssertions.Equivalency.Steps .XDocumentEquivalencyStep violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Equivalency.Steps .XDocumentEquivalencyStep violates rule 'Types 100% covered should be tagged with FullCoveredAttribute';FluentAssertions.Equivalency.Steps .XDocumentEquivalencyStep.OnHandle (Comparands ,IEquivalencyValidationContext ,IEquivalencyValidator) violates rule 'Avoid namespaces mutually dependent'",4,E,62.83
FluentAssertions.Equivalency.Steps .XElementEquivalencyStep,Src\FluentAssertions\Equivalency\Steps\XElementEquivalencyStep.cs,4y  98d,38min,8min,"3 issues;FluentAssertions.Equivalency.Steps .XElementEquivalencyStep violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Equivalency.Steps .XElementEquivalencyStep violates rule 'Types 100% covered should be tagged with FullCoveredAttribute';FluentAssertions.Equivalency.Steps .XElementEquivalencyStep.OnHandle (Comparands ,IEquivalencyValidationContext ,IEquivalencyValidator) violates rule 'Avoid namespaces mutually dependent'",4,E,62.83
FluentAssertions.Common .TypeExtensions,Src\FluentAssertions\Common\TypeExtensions.cs,4y  155d,3h  36min,49min,"54 issues;FluentAssertions.Common .TypeExtensions violates rule 'Avoid types with too many methods';FluentAssertions.Common .TypeExtensions violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Common .TypeExtensions violates rule 'Types 100% covered should be tagged with FullCoveredAttribute';FluentAssertions.Common .TypeExtensions.IsDecoratedWith <TAttribute>(Type) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common .TypeExtensions.IsDecoratedWith <TAttribute>(MemberInfo) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common .TypeExtensions .IsDecoratedWithOrInherit <TAttribute>(Type) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common .TypeExtensions .IsDecoratedWithOrInherit <TAttribute>(MemberInfo) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common .TypeExtensions.IsDecoratedWith <TAttribute>(Type,Expression<Func <TAttribute,Boolean>>) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common .TypeExtensions.IsDecoratedWith <TAttribute>(MemberInfo,Expression <Func<TAttribute,Boolean>>) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common .TypeExtensions .IsDecoratedWithOrInherit <TAttribute>(Type,Expression<Func <TAttribute,Boolean>>) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common .TypeExtensions .GetMatchingAttributes<TAttribute> (Type) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common .TypeExtensions .GetMatchingAttributes<TAttribute> (Type,Expression<Func<TAttribute ,Boolean>>) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common .TypeExtensions .GetMatchingOrInheritedAttributes <TAttribute>(Type) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common .TypeExtensions .GetMatchingOrInheritedAttributes <TAttribute>(Type,Expression<Func <TAttribute,Boolean>>) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common .TypeExtensions .GetCustomAttributes<TAttribute> (MemberInfo,Boolean) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common .TypeExtensions.IsEquivalentTo (IMember,IMember) violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Common .TypeExtensions.IsEquivalentTo (IMember,IMember) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common .TypeExtensions .GetClosedGenericInterfaces(Type ,Type) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common .TypeExtensions.OverridesEquals (Type) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common .TypeExtensions.FindProperty(Type ,String,MemberVisibility) violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Common .TypeExtensions.FindProperty(Type ,String,MemberVisibility) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common .TypeExtensions.FindField(Type ,String,MemberVisibility) violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Common .TypeExtensions.FindField(Type ,String,MemberVisibility) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common .TypeExtensions.GetMembers(Type ,MemberVisibility) violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Common .TypeExtensions.GetMembers(Type ,MemberVisibility) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common .TypeExtensions.GetProperties(Type ,MemberVisibility) violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Common .TypeExtensions.GetProperties(Type ,MemberVisibility) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common .TypeExtensions.GetFields(Type ,MemberVisibility) violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Common .TypeExtensions.GetFields(Type ,MemberVisibility) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common .TypeExtensions .GetTypeReflectorFor(Type ,MemberVisibility) violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Common .TypeExtensions.IsCSharpAbstract (Type) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common .TypeExtensions.IsCSharpSealed (Type) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common .TypeExtensions.IsCSharpStatic (Type) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common .TypeExtensions.GetMethod(Type ,String,IEnumerable<Type>) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common .TypeExtensions.HasMethod(Type ,String,IEnumerable<Type>) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common .TypeExtensions .GetParameterlessMethod(Type ,String) violates rule 'Methods that could have a lower visibility';FluentAssertions.Common .TypeExtensions .GetParameterlessMethod(Type ,String) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common .TypeExtensions.FindPropertyByName (Type,String) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common .TypeExtensions .HasExplicitlyImplementedProperty (Type,Type,String) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common .TypeExtensions .GetIndexerByParameterTypes(Type ,IEnumerable<Type>) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common .TypeExtensions.IsIndexer (PropertyInfo) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common .TypeExtensions.GetConstructor (Type,IEnumerable<Type>) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common .TypeExtensions .IsAssignableToOpenGeneric(Type ,Type) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common .TypeExtensions .IsDerivedFromOpenGeneric(Type ,Type) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common .TypeExtensions.IsUnderNamespace (Type,String) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common .TypeExtensions.IsSameOrInherits (Type,Type) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common .TypeExtensions .GetExplicitConversionOperator (Type,Type,Type) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common .TypeExtensions .GetImplicitConversionOperator (Type,Type,Type) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common .TypeExtensions.HasValueSemantics (Type) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common .TypeExtensions .IsCompilerGenerated(Type) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common .TypeExtensions.HasFriendlyName (Type) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common .TypeExtensions.IsRecord(Type) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common .TypeExtensions .NullableOrActualType(Type) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common .TypeExtensions..cctor() violates rule 'Avoid namespaces mutually dependent'",109,C,14.6
FluentAssertions.Equivalency .IEquivalencyOptions,Src\FluentAssertions\Equivalency\IEquivalencyOptions.cs,4y  208d,51min,11min,1 issue;FluentAssertions.Equivalency .IEquivalencyOptions violates rule 'Avoid interfaces too big',N/A,C,17.4
FluentAssertions .AsyncAssertionsExtensions,Src\FluentAssertions\AsyncAssertionsExtensions.cs,4y  239d,53min,11min,"4 issues;FluentAssertions .AsyncAssertionsExtensions violates rule 'Avoid namespaces mutually dependent';FluentAssertions .AsyncAssertionsExtensions violates rule 'Types 100% covered should be tagged with FullCoveredAttribute';FluentAssertions .AsyncAssertionsExtensions .WithResult<T>(Task <AndWhichConstraint <GenericAsyncFunctionAssertions<T> ,T>>,T,String,Object[]) violates rule 'Avoid namespaces mutually dependent';FluentAssertions .AsyncAssertionsExtensions .WithResult<T>(Task <AndWhichConstraint <TaskCompletionSourceAssertions<T> ,T>>,T,String,Object[]) violates rule 'Avoid namespaces mutually dependent'",8,E,55.77
FluentAssertions .ObjectAssertionsExtensions,Src\FluentAssertions\ObjectAssertionsExtensions.cs,5y  66d,1h  22min,15min,"5 issues;FluentAssertions .ObjectAssertionsExtensions violates rule 'Avoid namespaces mutually dependent';FluentAssertions .ObjectAssertionsExtensions .BeDataContractSerializable<T> (ObjectAssertions,Func <EquivalencyOptions<T> ,EquivalencyOptions<T>>,String ,Object[]) violates rule 'Avoid namespaces mutually dependent';FluentAssertions .ObjectAssertionsExtensions .BeDataContractSerializable<T> (ObjectAssertions,Func <EquivalencyOptions<T> ,EquivalencyOptions<T>>,String ,Object[]) violates rule 'Code should be tested';FluentAssertions .ObjectAssertionsExtensions .BeXmlSerializable (ObjectAssertions,String,Object[]) violates rule 'Avoid namespaces mutually dependent';FluentAssertions .ObjectAssertionsExtensions .BeXmlSerializable (ObjectAssertions,String,Object[]) violates rule 'Code should be tested'",26,D,29.89
FluentAssertions .NumericAssertionsExtensions,Src\FluentAssertions\NumericAssertionsExtensions.cs,5y  86d,3h  25min,39min,"8 issues;FluentAssertions .NumericAssertionsExtensions violates rule 'Avoid types too big';FluentAssertions .NumericAssertionsExtensions violates rule 'Types almost 100% tested should be 100% tested';FluentAssertions .NumericAssertionsExtensions .BeCloseTo(NumericAssertions<SByte >,SByte,Byte,String,Object[]) violates rule 'Avoid methods with too many overloads';FluentAssertions .NumericAssertionsExtensions .NotBeCloseTo(NumericAssertions <SByte>,SByte,Byte,String,Object[] ) violates rule 'Avoid methods with too many overloads';FluentAssertions .NumericAssertionsExtensions .BeApproximately (NullableNumericAssertions<Single> ,Single,Single,String,Object[]) violates rule 'Avoid methods with too many overloads';FluentAssertions .NumericAssertionsExtensions .NotBeApproximately (NullableNumericAssertions<Single> ,Single,Single,String,Object[]) violates rule 'Avoid methods with too many overloads';FluentAssertions .NumericAssertionsExtensions .NotBeApproximately (NumericAssertions<Single>,Single ,Single,String,Object[]) violates rule 'Code should be tested';FluentAssertions .NumericAssertionsExtensions .NotBeApproximately (NumericAssertions<Double>,Double ,Double,String,Object[]) violates rule 'Code should be tested'",279,B,7.42
FluentAssertions.Equivalency.Steps .DictionaryEquivalencyStep,Src\FluentAssertions\Equivalency\Steps\DictionaryEquivalencyStep.cs,5y  126d,58min,10min,"3 issues;FluentAssertions.Equivalency.Steps .DictionaryEquivalencyStep violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Equivalency.Steps .DictionaryEquivalencyStep .OnHandle(Comparands ,IEquivalencyValidationContext ,IEquivalencyValidator) violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Equivalency.Steps .DictionaryEquivalencyStep .OnHandle(Comparands ,IEquivalencyValidationContext ,IEquivalencyValidator) violates rule 'Code should be tested'",19,D,25.94
FluentAssertions.Common.MemberPath,Src\FluentAssertions\Common\MemberPath.cs,6y  25d,1h  9min,11min,"15 issues;FluentAssertions.Common.MemberPath violates rule 'Class with no descendant should be sealed if possible';FluentAssertions.Common.MemberPath violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Common.MemberPath violates rule 'Types 100% covered should be tagged with FullCoveredAttribute';FluentAssertions.Common.MemberPath .get_MemberName() violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common.MemberPath ..ctor(IMember,String) violates rule 'Avoid namespaces mutually dependent';FluentAssertions.Common.MemberPath ..ctor(IMember,String) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common.MemberPath ..ctor(Type,Type,String) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common.MemberPath ..ctor(String) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common.MemberPath .IsParentOrChildOf(MemberPath) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common.MemberPath .IsSameAs(MemberPath) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common.MemberPath .AsParentCollectionOf(MemberPath) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common.MemberPath .IsEquivalentTo(String) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common.MemberPath .HasSameParentAs(MemberPath) violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common.MemberPath .GetContainsSpecificCollectionInde x() violates rule 'Avoid public methods not publicly visible';FluentAssertions.Common.MemberPath .WithCollectionAsRoot() violates rule 'Avoid public methods not publicly visible'",27,C,15.36
FluentAssertions.Equivalency.Steps .AutoConversionStep,Src\FluentAssertions\Equivalency\Steps\AutoConversionStep.cs,6y  59d,36min,6min,"3 issues;FluentAssertions.Equivalency.Steps .AutoConversionStep.Handle (Comparands ,IEquivalencyValidationContext ,IEquivalencyValidator) violates rule 'Code should be tested';FluentAssertions.Equivalency.Steps .AutoConversionStep.TryChangeType (Object,Type,Object&) violates rule 'Code should be tested';FluentAssertions.Equivalency.Steps .AutoConversionStep.ToString() violates rule 'Code should be tested'",27,C,13.37
FluentAssertions.Common .FullFrameworkReflector,Src\FluentAssertions\Common\FullFrameworkReflector.cs,7y  47d,33min,4min  44s,"3 issues;FluentAssertions.Common .FullFrameworkReflector violates rule 'Class with no descendant should be sealed if possible';FluentAssertions.Common .FullFrameworkReflector violates rule 'Types that could be declared as private, nested in a parent type';FluentAssertions.Common .FullFrameworkReflector .GetExportedTypes(Assembly) violates rule 'Code should be tested'",12,D,21.72
FluentAssertions .TypeEnumerableExtensions,Src\FluentAssertions\TypeEnumerableExtensions.cs,7y  235d,5h  18min,41min,"17 issues;FluentAssertions .TypeEnumerableExtensions violates rule 'Avoid namespaces mutually dependent';FluentAssertions .TypeEnumerableExtensions violates rule 'Types 100% covered should be tagged with FullCoveredAttribute';FluentAssertions .TypeEnumerableExtensions .ThatAreDecoratedWith<TAttribute> (IEnumerable<Type>) violates rule 'Avoid namespaces mutually dependent';FluentAssertions .TypeEnumerableExtensions .ThatAreDecoratedWithOrInherit <TAttribute>(IEnumerable<Type>) violates rule 'Avoid namespaces mutually dependent';FluentAssertions .TypeEnumerableExtensions .ThatAreNotDecoratedWith <TAttribute>(IEnumerable<Type>) violates rule 'Avoid namespaces mutually dependent';FluentAssertions .TypeEnumerableExtensions .ThatAreNotDecoratedWithOrInherit <TAttribute>(IEnumerable<Type>) violates rule 'Avoid namespaces mutually dependent';FluentAssertions .TypeEnumerableExtensions .ThatAreInNamespace(IEnumerable <Type>,String) violates rule 'Avoid namespaces mutually dependent';FluentAssertions .TypeEnumerableExtensions .ThatAreUnderNamespace(IEnumerable <Type>,String) violates rule 'Avoid namespaces mutually dependent';FluentAssertions .TypeEnumerableExtensions .ThatDeriveFrom<T>(IEnumerable <Type>) violates rule 'Avoid namespaces mutually dependent';FluentAssertions .TypeEnumerableExtensions .ThatImplement<T>(IEnumerable<Type >) violates rule 'Avoid namespaces mutually dependent';FluentAssertions .TypeEnumerableExtensions .ThatAreClasses(IEnumerable<Type>) violates rule 'Avoid namespaces mutually dependent';FluentAssertions .TypeEnumerableExtensions .ThatAreNotClasses(IEnumerable <Type>) violates rule 'Avoid namespaces mutually dependent';FluentAssertions .TypeEnumerableExtensions .ThatAreStatic(IEnumerable<Type>) violates rule 'Avoid namespaces mutually dependent';FluentAssertions .TypeEnumerableExtensions .ThatAreNotStatic(IEnumerable<Type >) violates rule 'Avoid namespaces mutually dependent';FluentAssertions .TypeEnumerableExtensions .ThatSatisfy(IEnumerable<Type> ,Func<Type,Boolean>) violates rule 'Avoid namespaces mutually dependent';FluentAssertions .TypeEnumerableExtensions .UnwrapTaskTypes(IEnumerable<Type> ) violates rule 'Avoid namespaces mutually dependent';FluentAssertions .TypeEnumerableExtensions .UnwrapEnumerableTypes(IEnumerable <Type>) violates rule 'Avoid namespaces mutually dependent'",15,E,118.73
